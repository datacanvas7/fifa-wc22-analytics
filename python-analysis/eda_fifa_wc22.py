# -*- coding: utf-8 -*-
"""eda_fifa_wc22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OTgiZXOiHLMblXmBJsoS1iMOp_lyOH0_

# EDA on FIFA WC 2022 Qatar

## 01- Importing Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## 02- Loading dataset"""

df = pd.read_csv('Fifa_world_cup_matches.csv')
df.head(5)

"""## 03- Applying EDA steps"""

df.shape

df.info()

df.describe()

df.isnull().sum()

df.describe().T

df["date"].head()

df["hour"].head()

# Possession to numeric
df['possession team1'] = df['possession team1'].str.rstrip('%').astype(float)
df['possession team2'] = df['possession team2'].str.rstrip('%').astype(float)

# New metrics
df['total_goals'] = df['number of goals team1'] + df['number of goals team2']
df['shot_accuracy_team1'] = df['number of goals team1'] / df['total attempts team1']
df['shot_accuracy_team2'] = df['number of goals team2'] / df['total attempts team2']

df.head(5)

"""## 04- Visualizations

### Total Goals scored by Teams
"""

import pandas as pd
import plotly.express as px

# Create new dataframes for team1 and team2 with their goals
team1_goals = df[["team1", "number of goals team1"]].rename(
    columns={"team1": "team", "number of goals team1": "goals"}
)
team2_goals = df[["team2", "number of goals team2"]].rename(
    columns={"team2": "team", "number of goals team2": "goals"}
)

# Combine the dataframes
all_teams_goals = pd.concat([team1_goals, team2_goals])

# Group by team and sum the goals
total_goals_by_team = all_teams_goals.groupby("team")["goals"].sum().reset_index()

# Sort in descending order
total_goals_by_team = total_goals_by_team.sort_values(by="goals", ascending=False)

# Create a bar chart
fig = px.bar(
    total_goals_by_team,
    x="team",
    y="goals",
    title="Total Goals Scored by Teams in FIFA World Cup",
    labels={"team": "Team", "goals": "Total Goals"},
    color="goals",
    color_continuous_scale="Viridis"
)

# Improve layout for better readability
fig.update_layout(
    xaxis=dict(
        tickangle=45,
        title_font=dict(size=14),
        tickfont=dict(size=12)
    ),
    yaxis=dict(
        title_font=dict(size=14),
        tickfont=dict(size=12)
    ),
    coloraxis_showscale=False,
    plot_bgcolor='white',
    hoverlabel=dict(bgcolor="white", font_size=12),
    margin=dict(b=100)
)

# Display the chart
fig.show()

"""### Fewest Goals conceded by Teams"""

import pandas as pd
import plotly.express as px

# Create new dataframes for team1 and team2 with their conceded goals
team1_conceded = df[["team1", "conceded team1"]].rename(
    columns={"team1": "team", "conceded team1": "conceded"}
)
team2_conceded = df[["team2", "conceded team2"]].rename(
    columns={"team2": "team", "conceded team2": "conceded"}
)

# Combine the dataframes
all_teams_conceded = pd.concat([team1_conceded, team2_conceded])

# Group by team and sum the conceded goals
total_conceded_by_team = all_teams_conceded.groupby("team")["conceded"].sum().reset_index()

# Sort in ascending order (fewest goals conceded first)
total_conceded_by_team = total_conceded_by_team.sort_values(by="conceded", ascending=True)

# Create a bar chart
fig = px.bar(
    total_conceded_by_team,
    x="team",
    y="conceded",
    title="Fewest Goals Conceded by Teams in FIFA World Cup",
    labels={"team": "Team", "conceded": "Goals Conceded"},
    color="conceded",
    color_continuous_scale="Viridis_r"  # Reversed color scale so lower is better (darker)
)

# Improve layout for better readability
fig.update_layout(
    xaxis=dict(
        tickangle=45,
        title_font=dict(size=14),
        tickfont=dict(size=12)
    ),
    yaxis=dict(
        title_font=dict(size=14),
        tickfont=dict(size=12)
    ),
    coloraxis_showscale=False,
    plot_bgcolor='white',
    hoverlabel=dict(bgcolor="white", font_size=12),
    margin=dict(b=100)
)

# Display the chart
fig.show()

"""### Possession vs Goals"""

import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go

# Process and combine team data
team_stats = (
    pd.concat([
        df[["team1", "possession team1", "number of goals team1"]].rename(
            columns={"team1": "team", "possession team1": "possession", "number of goals team1": "goals"}
        ),
        df[["team2", "possession team2", "number of goals team2"]].rename(
            columns={"team2": "team", "possession team2": "possession", "number of goals team2": "goals"}
        )
    ])
    .assign(
        # First check if possession is string before stripping %
        possession=lambda x: x["possession"].apply(lambda val: float(str(val).rstrip('%')) if isinstance(val, str) else float(val)),
        goals=lambda x: pd.to_numeric(x["goals"])
    )
    .groupby("team")
    .agg(
        avg_possession=("possession", "mean"),
        total_goals=("goals", "sum"),
        matches_played=("goals", "count")
    )
    .reset_index()
)

# Calculate correlation and trendline
x, y = team_stats["avg_possession"], team_stats["total_goals"]
corr = np.corrcoef(x, y)[0, 1]
z = np.poly1d(np.polyfit(x, y, 1))

# Create visualization
fig = px.scatter(
    team_stats,
    x="avg_possession",
    y="total_goals",
    text="team",
    size="matches_played",
    title=f"Possession vs Goals (Correlation: {corr:.2f})",
    labels={
        "avg_possession": "Avg Possession (%)",
        "total_goals": "Total Goals",
        "matches_played": "Matches Played"
    },
    color="total_goals",
    color_continuous_scale="Viridis"
).update_traces(
    textposition='top center',
    marker=dict(opacity=0.8)
).add_traces(
    go.Scatter(
        x=np.linspace(x.min(), x.max(), 100),
        y=z(np.linspace(x.min(), x.max(), 100)),
        mode='lines',
        name='Trend',
        line=dict(color='red', dash='dash'),
        opacity=0.7
    )
).update_layout(
    xaxis=dict(title_font=dict(size=14)),
    yaxis=dict(title_font=dict(size=14)),
    plot_bgcolor='white',
    xaxis_range=[30, 70]
)

fig.show()

"""### Shot Conversion Efficiency"""

# Process and analyze data
team_stats = (
    pd.concat([
        df[["team1", "total attempts team1", "number of goals team1"]]
            .rename(columns={"team1": "team", "total attempts team1": "shots", "number of goals team1": "goals"}),
        df[["team2", "total attempts team2", "number of goals team2"]]
            .rename(columns={"team2": "team", "total attempts team2": "shots", "number of goals team2": "goals"})
    ])
    .assign(
        shots=lambda x: pd.to_numeric(x["shots"]),
        goals=lambda x: pd.to_numeric(x["goals"])
    )
    .groupby("team")
    .agg(total_shots=("shots", "sum"), total_goals=("goals", "sum"), matches_played=("shots", "count"))
    .query("total_shots >= 10")  # Filter minimum shots
    .assign(conversion_rate=lambda x: (x["total_goals"]/x["total_shots"]*100).round(2))
    .sort_values("conversion_rate", ascending=False)
    .reset_index()
)

# Create visualization
fig = px.bar(
    team_stats,
    x="team",
    y="conversion_rate",
    title="Shot Conversion Efficiency (Goals per 100 Shots)",
    labels={"team": "Team", "conversion_rate": "Conversion Rate (%)"},
    color="conversion_rate",
    color_continuous_scale="Viridis",
    hover_data=["total_goals", "total_shots", "matches_played"]
).update_traces(
    texttemplate='%{y:.1f}%',
    textposition='outside'
).update_layout(
    xaxis=dict(tickangle=45, title_font=dict(size=14), tickfont=dict(size=12)),
    yaxis=dict(title_font=dict(size=14), tickfont=dict(size=12), range=[0, team_stats["conversion_rate"].max()*1.1]),
    coloraxis_showscale=False,
    plot_bgcolor='white',
    hoverlabel=dict(bgcolor="white", font_size=12),
    margin=dict(b=100)
)

# Add average line
avg = team_stats["conversion_rate"].mean()
fig.add_shape(
    type="line",
    x0=-0.5, y0=avg, x1=len(team_stats)-0.5, y1=avg,
    line=dict(color="red", width=2, dash="dash")
).add_annotation(
    x=len(team_stats)-1, y=avg,
    text=f"Average: {avg:.2f}%",
    showarrow=False, yshift=10, font=dict(color="red")
)

fig.show()

"""### Defensive Pressures vs Goals Conceded"""

import plotly.express as px
import plotly.graph_objects as go

# Process and analyze defensive data
team_stats = (
    pd.concat([
        df[["team1", "defensive pressures applied team1", "conceded team1"]]
            .rename(columns={
                "team1": "team",
                "defensive pressures applied team1": "pressures",
                "conceded team1": "goals_conceded"
            }),
        df[["team2", "defensive pressures applied team2", "conceded team2"]]
            .rename(columns={
                "team2": "team",
                "defensive pressures applied team2": "pressures",
                "conceded team2": "goals_conceded"
            })
    ])
    .assign(
        pressures=lambda x: x["pressures"].apply(
            lambda v: float(str(v).rstrip('%')) if isinstance(v, str) or '%' in str(v) else float(v)
        ),
        goals_conceded=lambda x: pd.to_numeric(x["goals_conceded"], errors='coerce')
    )
    .dropna()
    .groupby("team")
    .agg(
        total_pressures=("pressures", "sum"),
        total_conceded=("goals_conceded", "sum"),
        matches=("goals_conceded", "count")
    )
    .query("matches > 0")
    .assign(
        avg_pressures=lambda x: (x["total_pressures"]/x["matches"]).round(1),
        avg_conceded=lambda x: (x["total_conceded"]/x["matches"]).round(2)
    )
    .reset_index()
)

# Calculate correlation and trendline
x, y = team_stats["avg_pressures"], team_stats["avg_conceded"]
corr = np.corrcoef(x, y)[0, 1]
trend = np.poly1d(np.polyfit(x, y, 1))

# Create visualization
fig = px.scatter(
    team_stats,
    x="avg_pressures",
    y="avg_conceded",
    text="team",
    size="matches",
    title=f"Defensive Pressures vs Goals Conceded (Correlation: {corr:.2f})",
    labels={
        "avg_pressures": "Avg Defensive Pressures/Match",
        "avg_conceded": "Avg Goals Conceded/Match",
        "matches": "Matches Played"
    },
    color="avg_conceded",
    color_continuous_scale="RdYlGn_r",
    width=1000,
    height=700
).update_traces(
    textposition='top center',
    marker=dict(opacity=0.8, sizemode='diameter', sizeref=0.1),
    textfont=dict(size=12)
).update_layout(
    font=dict(size=12),
    xaxis=dict(title_font=dict(size=14)),
    yaxis=dict(title_font=dict(size=14)),
    plot_bgcolor='white'
)

# Add trendline
fig.add_trace(
    go.Scatter(
        x=np.linspace(x.min(), x.max(), 100),
        y=trend(np.linspace(x.min(), x.max(), 100)),
        mode='lines',
        name='Trend',
        line=dict(color='red', dash='dash', width=2)
    )
)

# Add quadrant analysis
avg_x, avg_y = x.mean(), y.mean()
fig.update_layout(
    shapes=[
        dict(type="line", x0=avg_x, y0=y.min(), x1=avg_x, y1=y.max(), line=dict(color="gray", dash="dot")),
        dict(type="line", x0=x.min(), y0=avg_y, x1=x.max(), y1=avg_y, line=dict(color="gray", dash="dot"))
    ],
    annotations=[
        dict(x=x.max()*0.25, y=y.max()*0.25, text="High Efficiency", showarrow=False, font=dict(color="green")),
        dict(x=x.max()*0.75, y=y.max()*0.25, text="Active Defense", showarrow=False, font=dict(color="darkgreen")),
        dict(x=x.max()*0.25, y=y.max()*0.75, text="Passive Defense", showarrow=False, font=dict(color="darkred")),
        dict(x=x.max()*0.75, y=y.max()*0.75, text="Ineffective Defense", showarrow=False, font=dict(color="red"))
    ]
)

fig.show()

"""### Teams Performance: Group vs Knockout Stage"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Process data
def process_data(matches_df, stage_name):
    return (
        pd.concat([
            matches_df[["team1", "number of goals team1", "conceded team1", "possession team1",
                      "total attempts team1", "passes team1", "passes completed team1"]]
                .rename(columns={"team1": "team", "number of goals team1": "goals", "conceded team1": "conceded",
                               "possession team1": "possession", "total attempts team1": "attempts",
                               "passes team1": "passes", "passes completed team1": "completed_passes"}),
            matches_df[["team2", "number of goals team2", "conceded team2", "possession team2",
                      "total attempts team2", "passes team2", "passes completed team2"]]
                .rename(columns={"team2": "team", "number of goals team2": "goals", "conceded team2": "conceded",
                               "possession team2": "possession", "total attempts team2": "attempts",
                               "passes team2": "passes", "passes completed team2": "completed_passes"})
        ])
        .assign(**{col: lambda x: pd.to_numeric(x[col]) for col in ["goals", "conceded", "possession", "attempts", "passes", "completed_passes"]})
        .groupby("team")
        .agg(
            total_goals=("goals", "sum"),
            total_conceded=("conceded", "sum"),
            avg_possession=("possession", "mean"),
            total_attempts=("attempts", "sum"),
            total_passes=("passes", "sum"),
            completed_passes=("completed_passes", "sum"),
            matches_played=("goals", "count")
        )
        .assign(
            goals_per_match=lambda x: (x["total_goals"] / x["matches_played"]).round(2),
            conceded_per_match=lambda x: (x["total_conceded"] / x["matches_played"]).round(2),
            shot_conversion=lambda x: (x["total_goals"] / x["total_attempts"] * 100).round(1),
            passing_accuracy=lambda x: (x["completed_passes"] / x["total_passes"] * 100).round(1),
            avg_possession_pct=lambda x: (x["avg_possession"] * 100).round(1),
            stage=stage_name
        )
        .reset_index()
    )

# Process stages
df["category"] = df["category"].astype(str)
group_stats = process_data(df[df["category"].str.contains("Group")], "Group Stage")
knockout_stats = process_data(df[~df["category"].str.contains("Group")], "Knockout Stage")
knockout_teams = set(knockout_stats["team"])
group_knockout_stats = group_stats[group_stats["team"].isin(knockout_teams)]
comparison_df = pd.concat([group_knockout_stats, knockout_stats])

# Create visualization
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=("Goals Per Match", "Goals Conceded Per Match",
                   "Shot Conversion Rate (%)", "Passing Accuracy (%)"),
    specs=[[{}, {}], [{}, {}]],
    vertical_spacing=0.15
)

metrics = [
    {"name": "goals_per_match", "row": 1, "col": 1, "ascending": False},
    {"name": "conceded_per_match", "row": 1, "col": 2, "ascending": True},
    {"name": "shot_conversion", "row": 2, "col": 1, "ascending": False},
    {"name": "passing_accuracy", "row": 2, "col": 2, "ascending": False}
]

for metric in metrics:
    top_teams = knockout_stats.sort_values(metric["name"], ascending=metric["ascending"])["team"].head(8)
    plot_data = comparison_df[comparison_df["team"].isin(top_teams)]

    for stage, color in [("Group Stage", "royalblue"), ("Knockout Stage", "darkred")]:
        stage_data = plot_data[plot_data["stage"] == stage].sort_values(metric["name"], ascending=metric["ascending"])
        fig.add_trace(
            go.Bar(
                x=stage_data["team"],
                y=stage_data[metric["name"]],
                name=stage,
                marker_color=color,
                text=stage_data[metric["name"]].round(1),
                textposition="outside",
                showlegend=(metric["row"] == 1 and metric["col"] == 1)
            ),
            row=metric["row"],
            col=metric["col"]
        )

fig.update_layout(
    title_text="Team Performance: Group Stage vs. Knockout Stage",
    barmode="group",
    height=700,
    width=1000,
    plot_bgcolor="white",
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
    margin=dict(t=100)
).update_xaxes(tickangle=45)

fig.show()

"""### Possession vs Goals"""

import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go

# Process and combine team data
team_stats = (
    pd.concat([
        df[["team1", "possession team1", "number of goals team1"]].rename(
            columns={"team1": "team", "possession team1": "possession", "number of goals team1": "goals"}
        ),
        df[["team2", "possession team2", "number of goals team2"]].rename(
            columns={"team2": "team", "possession team2": "possession", "number of goals team2": "goals"}
        )
    ])
    .assign(
        # First check if possession is string before stripping %
        possession=lambda x: x["possession"].apply(lambda val: float(str(val).rstrip('%')) if isinstance(val, str) else float(val)),
        goals=lambda x: pd.to_numeric(x["goals"])
    )
    .groupby("team")
    .agg(
        avg_possession=("possession", "mean"),
        total_goals=("goals", "sum"),
        matches_played=("goals", "count")
    )
    .reset_index()
)

# Calculate correlation and trendline
x, y = team_stats["avg_possession"], team_stats["total_goals"]
corr = np.corrcoef(x, y)[0, 1]
z = np.poly1d(np.polyfit(x, y, 1))

# Create visualization
fig = px.scatter(
    team_stats,
    x="avg_possession",
    y="total_goals",
    text="team",
    size="matches_played",
    title=f"Possession vs Goals (Correlation: {corr:.2f})",
    labels={
        "avg_possession": "Avg Possession (%)",
        "total_goals": "Total Goals",
        "matches_played": "Matches Played"
    },
    color="total_goals",
    color_continuous_scale="Viridis"
).update_traces(
    textposition='top center',
    marker=dict(opacity=0.8)
).add_traces(
    go.Scatter(
        x=np.linspace(x.min(), x.max(), 100),
        y=z(np.linspace(x.min(), x.max(), 100)),
        mode='lines',
        name='Trend',
        line=dict(color='red', dash='dash'),
        opacity=0.7
    )
).update_layout(
    xaxis=dict(title_font=dict(size=14)),
    yaxis=dict(title_font=dict(size=14)),
    plot_bgcolor='white',
    xaxis_range=[30, 70]
)

fig.show()

"""### Set Pieces Effectiveness"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Process team data in one pipeline
team_stats = (
    pd.concat([
        df[["team1", "corners team1", "free kicks team1", "number of goals team1",
            "crosses team1", "crosses completed team1"]]
            .rename(columns={
                "team1": "team",
                "corners team1": "corners",
                "free kicks team1": "free_kicks",
                "number of goals team1": "goals",
                "crosses team1": "crosses",
                "crosses completed team1": "completed_crosses"
            }),
        df[["team2", "corners team2", "free kicks team2", "number of goals team2",
            "crosses team2", "crosses completed team2"]]
            .rename(columns={
                "team2": "team",
                "corners team2": "corners",
                "free kicks team2": "free_kicks",
                "number of goals team2": "goals",
                "crosses team2": "crosses",
                "crosses completed team2": "completed_crosses"
            })
    ])
    .assign(**{col: lambda x: pd.to_numeric(x[col])
            for col in ["corners", "free_kicks", "goals", "crosses", "completed_crosses"]})
    .groupby("team")
    .agg(
        total_corners=("corners", "sum"),
        total_free_kicks=("free_kicks", "sum"),
        total_goals=("goals", "sum"),
        total_crosses=("crosses", "sum"),
        completed_crosses=("completed_crosses", "sum"),
        matches_played=("corners", "count")
    )
    .assign(
        corners_per_match=lambda x: (x["total_corners"]/x["matches_played"]).round(1),
        free_kicks_per_match=lambda x: (x["total_free_kicks"]/x["matches_played"]).round(1),
        goals_per_match=lambda x: (x["total_goals"]/x["matches_played"]).round(1),
        cross_completion_rate=lambda x: (x["completed_crosses"]/x["total_crosses"]*100).round(1),
        set_pieces_per_goal=lambda x: ((x["total_corners"]+x["total_free_kicks"])/x["total_goals"]).round(1),
        set_piece_efficiency=lambda x: (100/((x["total_corners"]+x["total_free_kicks"])/x["total_goals"])).round(1)
    )
    .reset_index()
)

# Create subplots
fig = make_subplots(
    rows=2, cols=1,
    subplot_titles=("Set Piece Efficiency (%)", "Set Pieces Per Goal"),
    vertical_spacing=0.25
)

# Add traces
for i, (metric, color, title) in enumerate([
    ("set_piece_efficiency", px.colors.sequential.Viridis, "Efficiency"),
    ("set_pieces_per_goal", px.colors.sequential.Viridis[::-1], "Pieces/Goal")
]):
    data = team_stats.sort_values(metric, ascending=i==1).head(16)
    fig.add_trace(
        go.Bar(
            x=data["team"],
            y=data[metric],
            text=data[metric].apply(lambda x: f"{x:.1f}{'%' if i==0 else ''}"),
            textposition="outside",
            marker_color=color,
            name=title,
            customdata=data[["corners_per_match", "free_kicks_per_match"]],
            hovertemplate="<b>%{x}</b><br>%{y:.1f}" +
                        ("%<br>Corners/match: %{customdata[0]:.1f}<br>Free kicks/match: %{customdata[1]:.1f}" if i==0 else
                        "<br>Corners: %{customdata[0]:.1f}<br>Free kicks: %{customdata[1]:.1f}")
        ),
        row=i+1, col=1
    )

# Update layout
fig.update_layout(
    title_text="Set Piece Effectiveness Analysis",
    height=800,
    width=1000,
    showlegend=False,
    plot_bgcolor='white',
    xaxis1=dict(tickangle=45),
    xaxis2=dict(tickangle=45),
    yaxis1=dict(title="Efficiency (%)", range=[0, team_stats["set_piece_efficiency"].max()*1.1]),
    yaxis2=dict(title="Pieces/Goal", range=[0, team_stats["set_pieces_per_goal"].median()*2])
)

# Create scatter plot
fig2 = px.scatter(
    team_stats,
    x="corners_per_match",
    y="free_kicks_per_match",
    size="goals_per_match",
    color="cross_completion_rate",
    hover_name="team",
    title="Set Piece Usage Analysis",
    labels={
        "corners_per_match": "Corners/Match",
        "free_kicks_per_match": "Free Kicks/Match",
        "goals_per_match": "Goals/Match",
        "cross_completion_rate": "Cross Completion %"
    },
    color_continuous_scale="Viridis"
).update_traces(
    textposition='top center',
    marker=dict(opacity=0.8)
).update_layout(
    height=600,
    width=800,
    plot_bgcolor='white'
)

fig.show()
fig2.show()

"""### Goals Scored Per Tournament Stage"""

total_goals = (
    pd.concat([
        df['number of goals team1'],
        df['number of goals team2']
    ]).sum()
)
print(f"Total goals in tournament: {total_goals}")

import plotly.express as px
import pandas as pd

# Calculate total goals per match
df['total_goals'] = df['number of goals team1'] + df['number of goals team2']

# Group by tournament category/stage and calculate total goals
goals_by_stage = df.groupby('category').agg({
    'total_goals': 'sum',
    'team1': 'count'  # Count number of matches
}).reset_index()

goals_by_stage.rename(columns={'team1': 'matches'}, inplace=True)
goals_by_stage['avg_goals_per_match'] = round(goals_by_stage['total_goals'] / goals_by_stage['matches'], 2)

# Sort by tournament progression
stage_order = ['Group A', 'Group B', 'Group C', 'Group D', 'Group E', 'Group F',
               'Group G', 'Group H', 'Round of 16', 'Quarter-final', 'Semi-final',
               'Third place', 'Final']
goals_by_stage['category'] = pd.Categorical(goals_by_stage['category'], categories=stage_order, ordered=True)
goals_by_stage = goals_by_stage.sort_values('category')

# Create visualization
fig = px.bar(goals_by_stage, x='category', y='total_goals',
             title='Total Goals by Tournament Stage',
             labels={'category': 'Tournament Stage', 'total_goals': 'Total Goals'},
             color='avg_goals_per_match',
             color_continuous_scale='RdBu',
             text='total_goals')

# Improve layout
fig.update_layout(
    xaxis=dict(
        tickangle=45,
        title_font=dict(size=14),
        tickfont=dict(size=12),
    ),
    yaxis=dict(
        title_font=dict(size=14),
        tickfont=dict(size=12),
    ),
    plot_bgcolor='white',
    coloraxis_colorbar=dict(
        title='Avg Goals per Match',
    )
)

fig.update_traces(textposition='outside')

fig.show()

"""### Total Goals scored by Teams"""

import plotly.express as px
import pandas as pd

# Calculate total goals by team
team_goals = (
    pd.concat([
        df[["team1", "number of goals team1"]].rename(columns={"team1": "team", "number of goals team1": "goals"}),
        df[["team2", "number of goals team2"]].rename(columns={"team2": "team", "number of goals team2": "goals"})
    ])
    .groupby("team")["goals"]
    .sum()
    .reset_index()
    .sort_values("goals", ascending=False)
)

# Create interactive pie chart
fig = px.pie(team_goals,
             values='goals',
             names='team',
             title='Percentage of Total Goals Scored by Each Team',
             hover_data=['goals'],
             labels={'goals': 'Total Goals'},
             color_discrete_sequence=px.colors.qualitative.Plotly)

# Enhance hover template
fig.update_traces(
    hovertemplate="<b>%{label}</b><br>Goals: %{value}<br>Percent: %{percent}",
    textinfo='percent+label',
    textposition='inside',
    marker=dict(line=dict(color='white', width=1)))

# Optional: Make it a donut chart
fig.update_layout(
    uniformtext_minsize=12,
    uniformtext_mode='hide',
    showlegend=True,
    annotations=[dict(text='Goals', x=0.5, y=0.5, font_size=20, showarrow=False)]
)

fig.show()

"""### Defensive Pressures by Match Stage"""

plt.figure(figsize=(12, 6))  # Set figure size (width, height)

# Create boxplot with adjusted parameters
ax = sns.boxplot(
    x='category',
    y='defensive pressures applied team1',
    data=df,
    palette="Blues"  # Optional: adds color
)

# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha='right')  # Rotate 45 degrees and right-align

# Adjust title and labels
plt.title("Defensive Pressures by Match Stage", fontsize=14, pad=20)
plt.xlabel("Match Stage", fontsize=12)
plt.ylabel("Defensive Pressures Applied", fontsize=12)

# Adjust layout to prevent cutting off labels
plt.tight_layout()

# Optional: Add grid for better readability
plt.grid(axis='y', alpha=0.3)

# Show plot
plt.show()

"""### Teams Crossing Performance"""

import pandas as pd
import plotly.express as px

# Calculate crossing stats for each team
teams = set(df['team1']).union(set(df['team2']))
team_stats = []

for team in teams:
    team_matches = df[(df['team1'] == team) | (df['team2'] == team)]
    if len(team_matches) == 0:
        continue

    is_team1 = (team_matches['team1'] == team)
    wins = sum(
        (team_matches['number of goals team1'] > team_matches['number of goals team2']) & is_team1 |
        (team_matches['number of goals team2'] > team_matches['number of goals team1']) & ~is_team1
    )

    crosses_attempted = (
        team_matches.loc[is_team1, 'crosses team1'].sum() +
        team_matches.loc[~is_team1, 'crosses team2'].sum()
    )
    crosses_completed = (
        team_matches.loc[is_team1, 'crosses completed team1'].sum() +
        team_matches.loc[~is_team1, 'crosses completed team2'].sum()
    )

    team_stats.append({
        'team': team,
        'matches': len(team_matches),
        'crosses_per_match': round(crosses_attempted/len(team_matches), 2),
        'win_rate': round(wins/len(team_matches)*100, 1),
        'completion_rate': round(crosses_completed/crosses_attempted*100, 1) if crosses_attempted > 0 else 0
    })

crossing_df = pd.DataFrame(team_stats)

# Create the scatter plot
fig = px.scatter(
    crossing_df,
    x='crosses_per_match',
    y='win_rate',
    color='completion_rate',
    size='matches',
    hover_name='team',
    color_continuous_scale='Blues',
    labels={
        'crosses_per_match': 'Crosses per Match',
        'win_rate': 'Win Rate (%)',
        'completion_rate': 'Completion Rate (%)',
        'matches': 'Matches Played'
    },
    title='Crossing Effectiveness vs. Win Rate: 2022 FIFA World Cup'
)

# Customize the layout
fig.update_layout(
    plot_bgcolor='white',
    hovermode='closest',
    height=600,
    xaxis=dict(range=[5, 25]),  # Adjust based on your data
    yaxis=dict(range=[0, 100])
)

# Improve hover template
fig.update_traces(
    hovertemplate=(
        "<b>%{hovertext}</b><br>"
        "Crosses/Match: %{x:.1f}<br>"
        "Win Rate: %{y:.1f}%<br>"
        "Completion: %{marker.color:.1f}%<br>"
        "Matches: %{marker.size:.0f}"
    ),
    marker=dict(opacity=0.8, line=dict(width=1, color='DarkSlateGrey'))
)

fig.show()

"""### Team Crossing Performance Analysis"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

simplified_stages = ['Group Stage', 'Round of 16', 'Quarter-final', 'Semi-final', 'Third place', 'Final']
df['simplified_stage'] = df['category'].apply(lambda x: 'Group Stage' if 'Group' in x else x)

# 1. Calculate team-level crossing statistics
team_stats = []
for team in pd.unique(pd.concat([df['team1'], df['team2']])):
    team_matches = df[(df['team1'] == team) | (df['team2'] == team)]
    if len(team_matches) == 0:
        continue

    is_team1 = (team_matches['team1'] == team)
    crosses_attempted = (team_matches.loc[is_team1, 'crosses team1'].sum() +
                        team_matches.loc[~is_team1, 'crosses team2'].sum())
    crosses_completed = (team_matches.loc[is_team1, 'crosses completed team1'].sum() +
                        team_matches.loc[~is_team1, 'crosses completed team2'].sum())

    team_stats.append({
        'team': team,
        'matches': len(team_matches),
        'avg_crosses': crosses_attempted / len(team_matches),
        'completion_rate': (crosses_completed / crosses_attempted * 100) if crosses_attempted > 0 else 0,
        'stage_reached': team_matches['simplified_stage'].max()  # Highest stage reached
    })

team_df = pd.DataFrame(team_stats)

# 2. Calculate stage-level statistics (original code)
stage_stats = []
for stage in simplified_stages:
    stage_matches = df[df['simplified_stage'] == stage]
    if len(stage_matches) == 0:
        continue

    team_count = len(stage_matches) * 2
    stage_stats.append({
        'stage': stage,
        'avg_crosses': (stage_matches['crosses team1'].sum() + stage_matches['crosses team2'].sum()) / team_count,
        'avg_completed': (stage_matches['crosses completed team1'].sum() + stage_matches['crosses completed team2'].sum()) / team_count,
        'completion_rate': (stage_matches['crosses completed team1'].sum() + stage_matches['crosses completed team2'].sum()) /
                          (stage_matches['crosses team1'].sum() + stage_matches['crosses team2'].sum()) * 100,
        'avg_goals': (stage_matches['number of goals team1'].sum() + stage_matches['number of goals team2'].sum()) / team_count
    })

stage_df = pd.DataFrame(stage_stats).sort_values('stage', key=lambda x: x.map({v:i for i,v in enumerate(simplified_stages)}))

# Create dashboard with subplots
fig = make_subplots(
    rows=2, cols=1,
    subplot_titles=(
        "Crossing Performance by Tournament Stage",
        "Team Crossing Efficiency by Stage Reached"
    ),
    vertical_spacing=0.15,
    specs=[[{"type": "bar"}], [{"type": "scatter"}]]
)

# 1. Stage-level plot (top)
for col, name, color in [('avg_crosses', 'Avg Crosses', 'royalblue'),
                         ('avg_completed', 'Avg Completed', 'darkblue')]:
    fig.add_trace(go.Bar(
        x=stage_df['stage'], y=stage_df[col], name=name,
        marker_color=color, opacity=0.8, showlegend=True
    ), row=1, col=1)

for col, name, color, dash in [('completion_rate', 'Completion Rate', 'red', None),
                              ('avg_goals', 'Avg Goals', 'green', 'dash')]:
    fig.add_trace(go.Scatter(
        x=stage_df['stage'], y=stage_df[col], name=name,
        mode='lines+markers', yaxis='y2',
        line=dict(color=color, width=3, dash=dash),
        marker=dict(size=10), showlegend=True
    ), row=1, col=1)

# 2. Team-level plot (bottom)
fig.add_trace(go.Scatter(
    x=team_df['avg_crosses'],
    y=team_df['completion_rate'],
    mode='markers',
    marker=dict(
        size=team_df['matches']*3,
        color=team_df['stage_reached'].map({v:i for i,v in enumerate(simplified_stages)}),
        colorscale='Viridis',
        showscale=True,
        colorbar=dict(title='Stage Reached')
    ),
    text=team_df['team'],
    hoverinfo='text',
    hovertext=team_df.apply(
        lambda r: f"<b>{r['team']}</b><br>"
                 f"Stage: {r['stage_reached']}<br>"
                 f"Matches: {r['matches']}<br>"
                 f"Crosses/Match: {r['avg_crosses']:.1f}<br>"
                 f"Completion: {r['completion_rate']:.1f}%", axis=1),
    showlegend=False
), row=2, col=1)

# Update layout
fig.update_layout(
    title_text='FIFA World Cup 2022: Crossing Analysis Dashboard',
    height=900,
    plot_bgcolor='white',
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)

# Update axes
fig.update_yaxes(title_text="Average Crosses", row=1, col=1)
fig.update_yaxes(title_text="Completion Rate (%)", row=2, col=1)
fig.update_xaxes(title_text="Tournament Stage", row=1, col=1)
fig.update_xaxes(title_text="Average Crosses per Match", row=2, col=1)
fig.update_yaxes(
    title_text="Percentage (%)",
    overlaying='y',
    side='right',
    row=1, col=1
)

fig.show()

"""### Final Match"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

final_match = df[df['category'] == 'Final'].iloc[0] if 'Final' in df['category'].values else None

if final_match is None:
    print("Final match data not found")
    exit()

# Team names
team1, team2 = final_match['team1'], final_match['team2']

# Metric configuration
metrics = [
    ('Possession (%)', round(final_match['possession team1']*100, 1), round(final_match['possession team2']*100, 1)),
    ('Goals', final_match['number of goals team1'], final_match['number of goals team2']),
    ('Total Attempts', final_match['total attempts team1'], final_match['total attempts team2']),
    ('On Target', final_match['on target attempts team1'], final_match['on target attempts team2']),
    ('Off Target', final_match['off target attempts team1'], final_match['off target attempts team2']),
    ('Crosses', final_match['crosses team1'], final_match['crosses team2']),
    ('Completed Crosses', final_match['crosses completed team1'], final_match['crosses completed team2']),
    ('Cross Completion (%)', round(final_match['crosses completed team1']/final_match['crosses team1']*100, 1) if final_match['crosses team1'] > 0 else 0,
     round(final_match['crosses completed team2']/final_match['crosses team2']*100, 1) if final_match['crosses team2'] > 0 else 0),
    ('Passes', final_match['passes team1'], final_match['passes team2']),
    ('Pass Completion (%)', round(final_match['passes completed team1']/final_match['passes team1']*100, 1),
     round(final_match['passes completed team2']/final_match['passes team2']*100, 1)),
    ('Corners', final_match['corners team1'], final_match['corners team2']),
    ('Fouls', final_match['fouls against team2'], final_match['fouls against team1']),
    ('Yellow Cards', final_match['yellow cards team1'], final_match['yellow cards team2'])
]

# Create DataFrame
stats_df = pd.DataFrame({
    'Metric': [m[0] for m in metrics],
    team1: [m[1] for m in metrics],
    team2: [m[2] for m in metrics]
})

# Create figure
fig = make_subplots(
    rows=2, cols=2,
    specs=[[{"type": "table"}, {"type": "bar"}],
           [{"type": "bar", "colspan": 2}, None]],
    subplot_titles=("Match Statistics", "Attack Comparison", "Distribution Performance")
)

# Add table
fig.add_trace(
    go.Table(
        header=dict(values=stats_df.columns, fill_color='royalblue', font=dict(color='white')),
        cells=dict(values=[stats_df[col] for col in stats_df.columns], fill_color='whitesmoke')
    ),
    row=1, col=1
)

# Add attack comparison bars
attack_metrics = metrics[1:5]
for i, (team, color) in enumerate([(team1, '#75AADB'), (team2, '#E63946')]):
    fig.add_trace(
        go.Bar(
            x=[m[0] for m in attack_metrics],
            y=[stats_df[team].iloc[i+1] for i in range(4)],
            name=team,
            marker_color=color
        ),
        row=1, col=2
    )

# Add distribution bars
dist_metrics = metrics[5:10]
for i, (team, color) in enumerate([(team1, '#75AADB'), (team2, '#E63946')]):
    fig.add_trace(
        go.Bar(
            x=[m[0] for m in dist_metrics],
            y=[stats_df[team].iloc[i+5] for i in range(5)],
            name=team,
            marker_color=color,
            showlegend=False
        ),
        row=2, col=1
    )

# Update layout
fig.update_layout(
    title=f"World Cup Final: {team1} vs {team2}",
    height=700,
    barmode='group',
    plot_bgcolor='white',
    legend=dict(orientation='h', y=1.1)
)

fig.show()

"""---"""